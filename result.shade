module core/data/result =

import core/data/option (Some, None)
import core/error (Try, Unwrap)
import intrinsics (crash)

type Result e t =
    | Err e
    | Ok t

ok result = case result of
    Ok x -> Some x
    Err _ -> None

err result = case result of
    Err e -> Some e
    Ok _ -> None

unwrap_err result = case result of
    Err e -> e
    Ok _ -> crash "cannot unwrap_err an ok value"

member (Result e) of Try =
    ret x = Ok x

    bind self f = case self of
        Ok x -> f x
        Err e -> Err e

member (Result e) of Unwrap =
    unwrap self = case self of
        Ok x -> x
        Err _ -> crash "cannot unwrap an err value"

    unwrap_or self def = case self of
        Ok x -> x
        Err _ -> def
